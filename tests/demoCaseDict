/*---------------------------------*- C++ -*----------------------------------*\
filetype dictionary; coding utf-8; version 0.1; local --; purpose --;
\*----------------------------------------------------------------------------*/
#include '.\paramDict'

_environment
{
    libSource                 'C:\Path\to\a\model\library\on\your\machine';
    root                     .;
}
systemStructure
{
    connections
    {
        in_0_to_diff_0
        {
            source                in_0_tx;
            target                diff_0_rx_0;
        }
        in_1_to_diff_0
        {
            source                in_1_tx;
            target                diff_0_rx_1;
        }
        in_2_to_div_0
        {
            source                in_2_tx;
            target                div_0_rx_0;
        }
        diff_0_to_div_0
        {
            source                diff_0_tx;
            target                div_0_rx_1;
        }
    }
    components
    {
        diff_0
        {
            connectors
            {
                diff_0_rx_0
                {
                    reference             difference.IN1;
                    type                  input;
                }
                diff_0_rx_1
                {
                    reference             difference.IN2;
                    type                  input;
                }
                diff_0_tx
                {
                    reference             difference.OUT;
                    type                  input;
                }
            }
            prototype             subfolder\in\your\library\difference.fmu;
        }
        div_0
        {
            connectors
            {
                div_0_rx_0
                {
                    reference     quotient.IN1;
                    type          input;
                }
                div_0_rx_1
                {
                    reference     quotient.IN2;
                    type          input;
                }
                div_0_tx
                {
                    reference     quotient.OUT;
                    type          input;
                }

            }
            prototype             subfolder\in\your\library\quotient.fmu;
        }
        in_0
            {
            connectors
            {
                in_0_tx
                {
                    reference     constVal.OUT;
                    type          output;
                }
            }
            initialize
            {
                constVal.IN
                {
                    causality     parameter;
                    start         $in_0;
                    variability   fixed;
                }
            }
            prototype             subfolder\in\your\library\constantVal.fmu;
        }
        in_1
        {
            connectors
            {
                in_1_tx
                {
                    reference     constVal.OUT;
                    type          output;
                }
            }
            initialize
            {
                constVal.IN
                {
                    causality     parameter;
                    start         $in_1;
                    variability   fixed;
                }
            }
            prototype             subfolder\in\your\library\constantVal.fmu;
        }
        in_2
        {
            connectors
            {
                in_2_tx
                {
                    reference     constVal.OUT;
                    type          output;
                }
            }
            initialize
            {
                constVal.IN
                {
                    causality     parameter;
                    start         $in_2;
                    variability   fixed;
                }
            }
            prototype             subfolder\in\your\library\constantVal.fmu;
        }
    }
}
run
{
    simulation
    {
        name                  demoCase;
        startTime             0;
        baseStepSize          0.1;
    }
}
